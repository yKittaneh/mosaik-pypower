# encoding: utf-8
import os.path

import numpy as np
import pytest

from mosaik_pypower import mosaik


kV = 1000
MW = 1000 ** 2
mf = 1  # Magic factor, see mosaik_pypower.mosaik.PyPower.__init__
fpos = -1  # Feed-in positive, see same mosaik_pypower.mosaik.PyPower.__init__


def all_close(data, expected, ndigits=2):
    """Compare two nested dicts and check if their values rounded to *ndigits*
    after the decimal point are equal.

    """
    assert data.keys() == expected.keys()
    for eid, attrs in data.items():
        for attr, val in attrs.items():
            assert round(val, ndigits) == round(expected[eid][attr], ndigits)

    return True


# Case from https://bitbucket.org/ssc/cim2busbranch/src/tip/contrib/pp_test.py
#
#         Grid
#           +
# Transformer20kV(REF)
#           +              B_0
#          Bus0 ------------------- Bus1
#           |                        |
#           |B_1                     |B_2
#           |                        |
#           |              B_3       |
#          Bus2 ------------------- Bus3
#
def test_mosaik_nozmq():
    """Test the API implementation without the network stack."""
    sim = mosaik.PyPower()
    sim._magic_factor = mf
    grid_file = os.path.join(os.path.dirname(__file__), 'data',
                             'test_case_b.json')
    init = sim.init(60, {}, [(
        0,  # cfg_id
        'PowerGrid',  # model name
        1,  # Num instances
        {'file': grid_file},
    )])

    assert init == {0: [{
        'Bus2': 'PQBus',
        'Bus3': 'PQBus',
        'Bus0': 'PQBus',
        'Bus1': 'PQBus',
        'Grid': 'Grid',
        'Trafo1': 'Transformer',
        'B_0': 'Branch',
        'B_1': 'Branch',
        'B_2': 'Branch',
        'B_3': 'Branch',
    }]}

    assert sim.get_relations() == [
        ('B_1',  'Bus0'),
        ('B_1',  'Bus2'),
        ('B_0', 'Bus0'),
        ('B_0', 'Bus1'),
        ('Trafo1', 'Grid'),
        ('Trafo1', 'Bus0'),
        ('B_2', 'Bus1'),
        ('B_2', 'Bus3'),
        ('B_3', 'Bus2'),
        ('B_3', 'Bus3'),
    ]

    assert sim.get_static_data() == {
        'Grid': {'vl': 110.0},
        'Bus0': {'vl': 20.0},
        'Bus1': {'vl': 20.0},
        'Bus2': {'vl': 20.0},
        'Bus3': {'vl': 20.0},
        'Trafo1': {
            's_max': 40.0,
            'u_p': 110,
            'u_s': 20,
            'i_max_p': 209.9,
            'i_max_s': 1050,
        },
        'B_0': {
            's_max': 199.98,
            'i_max': 9999,
            'length': 5.0,
            'r_per_km': 0.125,
            'x_per_km': 0.112,
            'c_per_km': 300 * mf,
        },
        'B_1': {
            's_max': 199.98,
            'i_max': 9999,
            'length': 3.0,
            'r_per_km': 0.125,
            'x_per_km': 0.112,
            'c_per_km': 300 * mf,
        },
        'B_2': {
            's_max': 199.98,
            'i_max': 9999,
            'length': 2.0,
            'r_per_km': 0.125,
            'x_per_km': 0.112,
            'c_per_km': 300 * mf,
        },
        'B_3': {
            's_max': 199.98,
            'i_max': 9999,
            'length': 0.3,
            'r_per_km': 0.125,
            'x_per_km': 0.112,
            'c_per_km': 300 * mf,
        },
    }

    data = {
        'Bus0': {'p': [1.76], 'q': [.95]},
        'Bus1': {'p': [.8, -.2], 'q': [.2, 0]},
        'Bus2': {'p': [-1.98], 'q': [-.28]},
        'Bus3': {'p': [.85], 'q': [.53]},
    }
    # Correct input data by converting to MW, appling the magic factor and
    # changing the sign:
    for d in data.values():
        for k, v in d.items():
            d[k] = [x * MW * mf * fpos for x in v]
    sim.set_data(data)

    sim.step(0)

    data = sim.get_data('PowerGrid', 'PQBus', None)
    assert all_close(data, {
        'Bus0': {
            'vm': 19.93254 * kV,
            'va': -0.22,
            'p_out': 1.76 * MW,
            'q_out': 0.95 * MW,
        },
        'Bus1': {
            'vm': 19.92981 * kV,
            'va': -0.21,
            'p_out': .6 * MW,
            'q_out': .2 * MW,
        },
        'Bus2': {
            'vm': 19.94052 * kV,
            'va': -0.19,
            'p_out': -1.98 * MW,
            'q_out': -0.28 * MW,
        },
        'Bus3': {
            'vm': 19.93702 * kV,
            'va': -0.19,
            'p_out': .85 * MW,
            'q_out': .53 * MW,
        },
    })

    data = sim.get_data('PowerGrid', 'Grid', None)
    assert all_close(data, {'Grid': {
        'p': 1.230959 * MW,
        'q': 1.023141 * MW,
    }}, ndigits=0)

    data = sim.get_data('PowerGrid', 'Branch', None)
    assert all_close(data, {
        'B_0': {
            'p_from':  0.004606 * MW,
            'q_from': -0.001519 * MW,
            'p_to':   -0.004592 * MW,
            'q_to':   -0.185669 * MW,
        },
        'B_1': {
            'p_from': -0.533868 * MW,
            'q_from':  0.066461 * MW,
            'p_to':    0.534151 * MW,
            'q_to':   -0.178588 * MW,
        },
        'B_2': {
            'p_from': -0.595408 * MW,
            'q_from': -0.014331 * MW,
            'p_to':    0.595631 * MW,
            'q_to':   -0.060366 * MW,
        },
        'B_3': {
            'p_from':  1.445849 * MW,
            'q_from':  0.458588 * MW,
            'p_to':   -1.445631 * MW,
            'q_to':   -0.469634 * MW,
        },
    }, ndigits=0)

    data = sim.get_data('PowerGrid', 'Transformer', None)
    assert all_close(data, {
        'Trafo1': {
            'p_from': 1.230959 * MW,
            'q_from': 1.023141 * MW,
            'p_to':  -1.230738 * MW,
            'q_to':  -1.014942 * MW,
        },
    }, ndigits=0)


# GRID_FILE = os.path.join(os.path.dirname(__file__), 'data',
#                          'MS_data_CIGRE_Szenarien.json')
#
# from xlsxwriter.workbook import Workbook
#
# import math
# def get_pq(P, cosphi):
#     S = [p / c for p, c in zip(P, cosphi)]
#     Q = []
#     for s, p in zip(S, P):
#         Q.append(math.sqrt((s ** 2) - (p ** 2)))
#
#     return {'p':[p*1000000 for p in P], 'q':[q*1000000 for q in Q]}
#
# def test_mosaik_nozmq():
#     sim = mosaik.PyPower()
#     init = sim.init(60, {}, [(0,  # cfg_id
#                        'PowerGrid',  # model name
#                        1,  # Num instances
#                        {'file': GRID_FILE},
#                        )]
#                     )
#
#     assert init == {0:
#         [{'MS_K2': 'PQBus',
#           'MS_K3': 'PQBus',
#           'MS_K4': 'PQBus',
#           'MS_K5': 'PQBus',
#           'MS_K6': 'PQBus',
#           'MS_K7': 'PQBus',
#           'MS_K8': 'PQBus',
#           'MS_K9': 'PQBus',
#           'MS_K10': 'PQBus',
#           'MS_K11': 'PQBus',
#           'MS_K12': 'PQBus',
#           'Grid': 'Grid',
#           'Trafo_MS_T1': 'Transformer',
#           'B_MS_L1': 'Branch',
#           'B_MS_L2': 'Branch',
#           'B_MS_L3': 'Branch',
#           'B_MS_L4': 'Branch',
#           'B_MS_L5': 'Branch',
#           'B_MS_L7': 'Branch',
#           'B_MS_L8': 'Branch',
#           'B_MS_L9': 'Branch',
#           'B_MS_L10': 'Branch',
#           'B_MS_L11': 'Branch',
# #          'B_MS_L13': 'Branch',
# #          'B_MS_L14': 'Branch',
#           }]}
#
#     expected =  [('B_MS_L1', 'MS_K2'),
#                ('B_MS_L1', 'MS_K3'),
#                ('B_MS_L2', 'MS_K3'),
#                ('B_MS_L2', 'MS_K4'),
#                ('B_MS_L3', 'MS_K4'),
#                ('B_MS_L3', 'MS_K5'),
#                ('B_MS_L4', 'MS_K5'),
#                ('B_MS_L4', 'MS_K6'),
#                ('B_MS_L5', 'MS_K6'),
#                ('B_MS_L5', 'MS_K7'),
#                ('B_MS_L7', 'MS_K8'),
#                ('B_MS_L7', 'MS_K9'),
#                ('B_MS_L8', 'MS_K9'),
#                ('B_MS_L8', 'MS_K4'),
#                ('B_MS_L9', 'MS_K9'),
#                ('B_MS_L9', 'MS_K10'),
#                ('B_MS_L10', 'MS_K10'),
#                ('B_MS_L10', 'MS_K11'),
#                ('B_MS_L11', 'MS_K11'),
#                ('B_MS_L11', 'MS_K12'),
# #               ('B_MS_L13', 'MS_K2'),
# #               ('B_MS_L13', 'MS_K3'),
# #               ('B_MS_L14', 'MS_K3'),
# #               ('B_MS_L14', 'MS_K4'),
#                ('Trafo_MS_T1', 'Grid'),
#                ('Trafo_MS_T1', 'MS_K2'),
#                ]
#
#     got = sim.get_relations()
#     assert len(expected) == len(got)
#     for tuple in got:
#         assert tuple in expected
#
#     static = sim.get_static_data()
#     #assert static['B_MS_L13'] == {'s_max':7.24, 'length':8.26}
#
#     #Values from E:\_Public\Gruppe SO\Themenfelder\Modellierung und Simulation\Netzberechnung\Workshop Evaluation von Netzberechnungen\pp_mv_case.py
#     #        Bus('MS_K2',  base_kv, 5.0, .95),
#     #        Bus('MS_K3',  base_kv),
#     #        Bus('MS_K4',  base_kv, [1.5, .35],  [.95, 1.0]),
#     #        Bus('MS_K5',  base_kv, -8.0, 0.95),
#     #        Bus('MS_K6',  base_kv, 1.2, 1.0),
#     #        Bus('MS_K7',  base_kv, .9, .95),
#     #        Bus('MS_K8',  base_kv, -.46, .95),
#     #        Bus('MS_K9',  base_kv, [3.5, -.75], [1.0, .95]),
#     #        Bus('MS_K10', base_kv),
#     #        Bus('MS_K11', base_kv, 2.0, .95),
#     #        Bus('MS_K12', base_kv, 1.6, .95),
#     data = {'MS_K2': get_pq([5.0],  [.95]),
#             'MS_K4': get_pq([1.5, 0.35], [.95, 1.0]),
#             'MS_K5': get_pq([-8.0], [.95]),
#             'MS_K6': get_pq([1.2], [1.0]),
#             'MS_K7': get_pq([.9], [.95]),
#             'MS_K8': get_pq([-.46], [.95]),
#             'MS_K9': get_pq([3.5, -.75], [1.0, .95]),
#             'MS_K11': get_pq([2.0], [.95]),
#             'MS_K12': get_pq([1.6], [.95]),
#             }
#     sim.set_data(data)
#
#     #Resulting case:
#     #(u'Grid', '0.000, 0.000, 0.000, 0.000, 1.000, 1.000, 0.000, 110.000, 1.000, 1.100, 0.900, ')
#     #(u'MS_K2', '5.000, 1.643, 0.000, 0.000, 1.000, 1.000, 0.000, 20.000, 1.000, 1.100, 0.900, ')
#     #(u'MS_K3', '0.000, 0.000, 0.000, 0.000, 1.000, 1.000, 0.000, 20.000, 1.000, 1.100, 0.900, ')
#     #(u'MS_K4', '1.850, 0.493, 0.000, 0.000, 1.000, 1.000, 0.000, 20.000, 1.000, 1.100, 0.900, ')
#     #(u'MS_K5', '-8.000, 2.629,0.000, 0.000, 1.000, 1.000, 0.000, 20.000, 1.000, 1.100, 0.900, ')
#     #(u'MS_K6', '1.200, 0.000, 0.000, 0.000, 1.000, 1.000, 0.000, 20.000, 1.000, 1.100, 0.900, ')
#     #(u'MS_K7', '0.900, 0.296, 0.000, 0.000, 1.000, 1.000, 0.000, 20.000, 1.000, 1.100, 0.900, ')
#     #(u'MS_K8', '-0.460, 0.151,0.000, 0.000, 1.000, 1.000, 0.000, 20.000, 1.000, 1.100, 0.900, ')
#     #(u'MS_K9', '2.750, 0.247, 0.000, 0.000, 1.000, 1.000, 0.000, 20.000, 1.000, 1.100, 0.900, ')
#     #(u'MS_K10', '0.000, 0.000,0.000, 0.000, 1.000, 1.000, 0.000, 20.000, 1.000, 1.100, 0.900, '
#     #(u'MS_K11', '2.000, 0.657,0.000, 0.000, 1.000, 1.000, 0.000, 20.000, 1.000, 1.100, 0.900, ')
#     #(u'MS_K12', '1.600, 0.526,0.000, 0.000, 1.000, 1.000, 0.000, 20.000, 1.000, 1.100, 0.900, ')
#
#     #('TRAFO', '0.001, 0.032, 0.000, 999.000, 999.000, 999.000, 0.000, 0.000, 1.000, -360.000, 360.000, ')
#     #(u'B_MS_L1', '0.033, 0.025, 0.026, 7.240, 7.240, 7.240, 0.000, 0.000, 1.000, -360.000, 360.000, ')
#     #(u'B_MS_L2', '0.110, 0.091, 0.001, 5.500, 5.500, 5.500, 0.000, 0.000, 1.000, -360.000, 360.000, ')
#     #(u'B_MS_L3', '0.015, 0.013, 0.000, 5.500, 5.500, 5.500, 0.000, 0.000, 1.000, -360.000, 360.000, ')
#     #(u'B_MS_L4', '0.027, 0.023, 0.000, 5.500, 5.500, 5.500, 0.000, 0.000, 1.000, -360.000, 360.000, ')
#     #(u'B_MS_L5', '0.053, 0.044, 0.001, 5.500, 5.500, 5.500, 0.000, 0.000, 1.000, -360.000, 360.000, ')
#     #(u'B_MS_L7', '0.016, 0.008, 0.007, 5.740, 5.740, 5.740, 0.000, 0.000, 1.000, -360.000, 360.000, ')
#     #(u'B_MS_L8', '0.005, 0.003, 0.002, 5.740, 5.740, 5.740, 0.000, 0.000, 1.000, -360.000, 360.000, ')
#     #(u'B_MS_L9', '0.003, 0.002, 0.001, 5.740, 5.740, 5.740, 0.000, 0.000, 1.000, -360.000, 360.000, ')
#     #(u'B_MS_L10', '0.007, 0.003, 0.003, 5.740, 5.740, 5.740, 0.000, 0.000, 1.000, -360.000, 360.000, ')
#     #(u'B_MS_L11', '0.016, 0.008, 0.007, 5.740, 5.740, 5.740, 0.000, 0.000, 1.000, -360.000, 360.000, ')
#
#     sim.step()
#
#
#
#     filename = 'msgrid.xlsx'
#     wb = Workbook(filename)
#     bold = wb.add_format({'bold': 1})
#     two_dec = wb.add_format({'num_format': '0.00'})
#     three_dec = wb.add_format({'num_format': '0.000'})
#
#     # Write bus data
#     ws_bus = wb.add_worksheet('Buses')
#     ## Headings
#     headings = [
#         'Name',
#         'V mag. [kV]',
#         u'V ang. [°]',
#         'P [MW]',
#         'Q [MVar]',
#     ]
#     for i, heading in enumerate(headings):
#         ws_bus.write(0, i, heading, bold)
#
#     ## Write bus data
#     busdata = sim.get_data('PowerGrid', 'PQBus', None)
#     attrs = [
#         ('name', None, None),
#         ('vm', three_dec, 1000),
#         ('va', three_dec, 1),
#         ('p_out', two_dec, 1000000),
#         ('q_out', two_dec, 1000000),
#     ]
#
#     griddata = sim.get_data('PowerGrid', 'Grid', None)
#
#     ws_bus.write(1, 0, 'Grid', None)
#     ws_bus.write(1, 1, '-', None)
#     ws_bus.write(1, 2, '-', None)
#     ws_bus.write(1, 3, griddata['Grid']['p']/1000000, three_dec)
#     ws_bus.write(1, 4, griddata['Grid']['q']/1000000, three_dec)
#
#     for i, (bus, data) in enumerate(sorted(busdata.items())):
#         data['name'] = bus
#         for j, (attr, fmt, scale) in enumerate(attrs):
#             val = data[attr]
#             if scale:
#                 val = val /scale
#             ws_bus.write(i + 2, j, val, fmt)
#
#     # Write branch data
#     ws_branch = wb.add_worksheet('Branches')
#     ## Headings
#     headings = [
#         'Name',
#         'P from [MW]',
#         'Q from [MVar]',
#         'P to [MW]',
#         'Q to [MVar]',
#     ]
#     for i, heading in enumerate(headings):
#         ws_branch.write(0, i, heading, bold)
#
#     ## Write branch data
#     attrs = [
#         ('name', None, None),
#         ('p_from', two_dec, 1000000),
#         ('q_from', two_dec, 1000000),
#         ('p_to', two_dec, 1000000),
#         ('q_to', two_dec, 1000000),
#     ]
#     branchdata = sim.get_data('PowerGrid', 'Branch', None)
#     transformerdata = sim.get_data('PowerGrid', 'Transformer', None)
#     branchdata.update(transformerdata)
#     for i, (branch, data) in enumerate(sorted(branchdata.items())):
#         data['name'] = branch
#         for j, (attr, fmt, scale) in enumerate(attrs):
#             val = data[attr]
#             if scale:
#                 val = val /scale
#             ws_branch.write(i + 1, j, val, fmt)
#
#     wb.close()
#
#
# def test_strange_p():
#     sim = mosaik.PyPower()
#     init = sim.init(60, {}, [(0,  # cfg_id
#                        'PowerGrid',  # model name
#                        1,  # Num instances
#                        {'file': os.path.join(os.path.dirname(__file__), 'data',
#                                              '120918_AD_NS_Land_1_HA_41.json')},
#                        )]
#                     )
#
#
#     set_547 = {'vHA01-DSS': {'q': [0.0, 0.0, 0.0], 'p': [-112.02, 0, 214.0]}, 'vHA12-BBG': {'q': [0.0, 0.0, 0.0, 0.0], 'p': [-112.02, 4405.015409856585, 151.33333333333334, 376.6666666666667]}, 'vKV0003': {'q': [0.0, 0.0, 0.0, 0.0], 'p': [1978.5459793126201, 4405.015409856585, -112.02, 473.0]}, 'vHA02-HOW': {'q': [0.0, 0.0, 0.0], 'p': [11000.0, -112.02, 1780.6710921548267]}, 'vHA06-BBG': {'q': [0.0, 0.0, 0.0], 'p': [434.0, -112.02, 0]}, 'vHA11-BBG': {'q': [0.0, 0.0, 0.0], 'p': [-112.02, 11000.0, 240.66666666666666]}, 'vHA08-DSS': {'q': [0.0, 0.0, 0.0], 'p': [-112.02, 5380.297971336883, 219.33333333333334]}, 'vHA01-HOW': {'q': [0.0, 0.0, 0.0], 'p': [62.0, -112.02, 11000.0]}, 'vHA04-BBG': {'q': [0.0, 0.0, 0.0], 'p': [-112.02, 149.33333333333334, 0]}, 'vHA09-BBG': {'q': [0.0, 0.0, 0.0], 'p': [-112.02, 0, 253.33333333333334]}, 'vHA05-DSS': {'q': [0.0, 0.0, 0.0], 'p': [295.3333333333333, 0, -112.02]}, 'vHA14-BBG': {'q': [0.0, 0.0, 0.0], 'p': [7508.810699463237, -112.02, 155.33333333333334]}, 'vHA03-BBG': {'q': [0.0, 0.0, 0.0], 'p': [149.33333333333334, 11000.0, -112.02]}, 'vHA02-AGP': {'q': [0.0, 0.0, 0.0, 0.0], 'p': [200.66666666666666, 11000.0, -112.02, 72.0]}, 'vHA06-DSS': {'q': [0.0, 0.0, 0.0], 'p': [173.33333333333334, -112.02, 0]}, 'vHA01-BBG': {'q': [0.0, 0.0, 0.0], 'p': [5751.210902134572, 322.0, -112.02]}, 'vHA13-BBG': {'q': [0.0, 0.0, 0.0], 'p': [-112.02, 11000.0, 204.66666666666666]}, 'vHA15-BBG': {'q': [0.0, 0.0, 0.0, 0.0], 'p': [-112.02, 0, 810.3333333333334, 196.66666666666666]}, 'vHA08-BBG': {'q': [0.0, 0.0, 0.0], 'p': [11000.0, -112.02, 155.33333333333334]}, 'vHA02-BBG': {'q': [0.0, 0.0, 0.0], 'p': [-112.02, 0, 147.33333333333334]}, 'vHA02-DSS': {'q': [0.0, 0.0, 0.0], 'p': [0, -112.02, 134.0]}, 'vKV0002': {'q': [0.0, 0.0, 0.0], 'p': [215.33333333333334, -112.02, 7763.322690473483]}, 'vHA03-HOW': {'q': [0.0, 0.0, 0.0], 'p': [4708.6932330149375, -112.02, 206.66666666666666]}, 'vKV0001': {'q': [0.0, 0.0], 'p': [-112.02, 2671.776902584631]}, 'vETZB-SEK': {'q': [0.0, 0.0], 'p': [11000.0, -112.02]}, 'vHA07-DSS': {'q': [0.0, 0.0, 0.0], 'p': [11000.0, -112.02, 49.333333333333336]}, 'vHA04-HOW': {'q': [0.0, 0.0, 0.0, 0.0], 'p': [-112.02, 10834.589606777561, 604.6666666666666, 84.0]}, 'vHA03-AGP': {'q': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'p}, 'vHA04-DSS': {'q': [0.0, 0.0, 0.0], 'p': [147.33333333333334, 11000.0, -112.02]}, 'vHA01-ADB': {'q': [0.0, 0.0, 0.0], 'p': [-112.02, 1920.9327212819533, 11000.0]}, 'vHA05-HOW': {'q': [0.0, 0.0, 0.0], 'p': [262.6666666666667, -112.02, 11000.0]}, 'vHA01-WEG': {'q': [0.0, 0.0, 0.0], 'p': [-112.02, 11000.0, 86.0]}, 'vHA01-AGP': {'q': [0.0, 0.0, 0.0], 'p': [-112.02, 5380.297971336883, 136.66666666666666]}, 'vHA07-BBG': {'q': [0.0, 0.0, 0.0], 'p': [-112.02, 225.33333333333334, 11000.0]}, 'vHA16-BBG': {'q': [0.0, 0.0, 0.0], 'p': [-112.02, 0, 233.33333333333334]}, 'vHA02-WEG': {'q': [0.0, 0.0, 0.0], 'p': [0, -112.02, 350.0]}, 'vHA10-BBG': {'q': [0.0, 0.0, 0.0], 'p': [-112.02, 11000.0, 128.0]}, 'vHA05-BBG': {'q': [0.0, 0.0, 0.0], 'p': [10479.389509790262, 85.33333333333333, -112.02]}}
#     #loadsum(547): 242698.196766get(548): {u'Grid': {'q': 3843336.5851866999, 'p': 2521719.8729330683}}
#     #get(548): {u'Trafo_1.0': {'p_to': -1591986.3550515424, 'p_from': 2521719.8729330683, 'q_from': 3843336.5851866999, 'q_to': -293444.97145723738}}
#     #get(548): {u'B_16.0': {'p_to': -7451.6516821169225, 'p_from': 17708.686967489146, 'q_from': -1768.8955981612371, 'q_to': 4705.2233465226955}, u'B_32.0': {'p_to': 490991.44572122092, 'p_from': -372037.43687671324, 'q_from': -365377.07786957728, 'q_to': 399430.57844075013}, u'B_5.0': {'p_to': 406837.84439825302, 'p_from': -362384.76470971626, 'q_from': -706449.96542638389, 'q_to': 719175.74902349443}, u'B_20.0': {'p_to': 82054.909994589485, 'p_from': 145730.46689107583, 'q_from': 70288.020945719865, 'q_to': -5078.8738372745247}, u'B_4.0': {'p_to': 575034.9272821924, 'p_from': -366517.29856019776, 'q_from': -616968.77327185473, 'q_to': 676662.05521971977}, u'B_8.0': {'p_to': 167513.30474817529, 'p_from': -91543.166112709499, 'q_from': -542021.12158664491, 'q_to': 563769.43578424887}, u'B_12.0': {'p_to': -22096.137919936638, 'p_from': 22947.760572601837, 'q_from': 2096.4207767533126, 'q_to': -1797.5339803852371}, u'B_14.0': {'p_to': 1571.4974179123747, 'p_from': -816.22817676126817, 'q_from': 718.77345127198441, 'q_to': -453.70299644491354}, u'B_17.0': {'p_to': -7688.6420724365826, 'p_from': 16211.811819009235, 'q_from': 2869.5471139341607, 'q_to': -429.58087275846083}, u'B_27.0': {'p_to': 4692.2852258230114, 'p_from': -693.9127396221204, 'q_from': -866.502447261871, 'q_to': 2269.7774063612228}, u'B_30.0': {'p_to': 420458.67719735776, 'p_from': 1071291.1340622006, 'q_from': 136837.53609681825, 'q_to': 386709.27266254596}, u'B_11.0': {'p_to': -14941.249005610021, 'p_from': 15573.710909999912, 'q_from': 887.8137788036903, 'q_to': -665.8439758206996}, u'B_9.0': {'p_to': -135524.68759341486, 'p_from': 204116.86136814099, 'q_from': 53060.929002924888, 'q_to': -33424.738079179719}, u'B_3.0': {'p_to': 279071.21155667404, 'p_from': -221764.31544525648, 'q_from': -96807.045526204223, 'q_to': 113212.54911888456}, u'B_25.0': {'p_to': 68757.528127532612, 'p_from': 299285.55516509461, 'q_from': 66018.87801241054, 'q_to': 63150.088720098058}, u'B_24.0': {'p_to': 539034.45331808389, 'p_from': -111600.87741054145, 'q_from': 11425.728433681941, 'q_to': 138587.01695694597}, u'B_28.0': {'p_to': 977.80656732512625, 'p_from': -922.75400918459502, 'q_from': -123.14086054636901, 'q_to': 142.46188448148061}, u'B_1.0': {'p_to': 53038.407245019822, 'p_from': 130820.07244094138, 'q_from': 39222.678616654004, 'q_to': 13411.317528738791}, u'B_2.0': {'p_to': 247094.55827653149, 'p_from': -50904.994809834257, 'q_from': -19734.175806649349, 'q_to': 75898.246916723423}, u'B_29.0': {'p_to': -9407.5990230283187, 'p_from': 9766.1363979757025, 'q_from': -140.00308222198149, 'q_to': 265.84652525497074}, u'B_15.0': {'p_to': 9749.5396945884931, 'p_from': -335.31953437635701, 'q_from': 5765.0936365038278, 'q_to': -2461.0644456601449}, u'B_23.0': {'p_to': 479686.38587275596, 'p_from': 2463446.2296256064, 'q_from': 1992357.8645730279, 'q_to': -959431.51394139067}, u'B_31.0': {'p_to': 489943.78125985258, 'p_from': -252202.71158383263, 'q_from': -174528.28139596747, 'q_to': 242587.48957773004}, u'B_35.0': {'p_to': -52.374389407105518, 'p_from': 4275.9574259907567, 'q_from': -4217.3755823193424, 'q_to': 5426.4797457334853}, u'B_33.0': {'p_to': -6603.4618141998717, 'p_from': 9163.2130869652065, 'q_from': -220.11191097203852, 'q_to': 1118.4811218446696}, u'B_21.0': {'p_to': -14513.542689829434, 'p_from': 19771.523646814665, 'q_from': 4516.1841871646566, 'q_to': -3010.9582661453569}, u'B_34.0': {'p_to': -3407.024996684735, 'p_from': 4943.9561040690514, 'q_from': -1578.05405414867, 'q_to': 2117.4547376435244}, u'B_22.0': {'p_to': 5774216.0112389131, 'p_from': 5248953.2962170411, 'q_from': 1805983.6075337015, 'q_to': 2062724.8513330524}, u'B_13.0': {'p_to': -10306.780919714494, 'p_from': 10558.95638504956, 'q_from': 15.414294778366699, 'q_to': 73.095504607351145}, u'B_26.0': {'p_to': 4798.7157617444009, 'p_from': 22603.791512386673, 'q_from': 6728.9315248252778, 'q_to': 2888.2945858072649}, u'B_10.0': {'p_to': -25974.822236845041, 'p_from': 29244.147434768121, 'q_from': 3336.8283311602399, 'q_to': -2189.4209299660861}, u'B_37.0': {'p_to': -1253.3268106385913, 'p_from': 1870.2027883849632, 'q_from': 685.98983529502118, 'q_to': -509.393967155864}, u'B_18.0': {'p_to': 56354.236344203033, 'p_from': 1029.267223754387, 'q_from': 28782.899989561189, 'q_to': -12355.465634812597}, u'B_19.0': {'p_to': 1580806.4392604521, 'p_from': 699653.2144913337, 'q_from': -487851.25249161734, 'q_to': 1140688.7219970305}, u'B_7.0': {'p_to': 380924.77683093899, 'p_from': -178474.76874635048, 'q_from': -703362.78127554909, 'q_to': 761319.05809976463}, u'B_36.0': {'p_to': 108598.31988816784, 'p_from': 13260.281539075391, 'q_from': 6952.2310284941459, 'q_to': 27932.780360481378}, u'B_6.0': {'p_to': 305854.39259867679, 'p_from': -281823.41774969327, 'q_from': -538195.40741233004, 'q_to': 545074.86295733321}}
#     #get(548): {u'vHA01-DSS': {'p_out': 101.98, 'va': -72.940615211768133, 'q_out': 0.0, 'vm': 61.131027891138054}, u'vHA12-BBG': {'p_out': 4820.995409856585, 'va': -47.977472218037697, 'q_out': 0.0, 'vm': 124.75092638055443}, u'vHA06-DSS': {'p_out': 61.313333333333347, 'va': -127.7514298640417, 'q_out': 0.0, 'vm': 261.35454846998994}, u'vHA06-BBG': {'p_out': 321.98000000000002, 'va': 111.18513754921847, 'q_out': 0.0, 'vm': 476.15396944425987}, u'vHA11-BBG': {'p_out': 11128.646666666666, 'va': 78.235028846007239, 'q_out': 0.0, 'vm': 791.80585707583032}, u'vHA08-DSS': {'p_out': 5487.6113046702158, 'va': -62.298509895655968, 'q_out': 0.0, 'vm': 42.109542507254801}, u'vHA05-DSS': {'p_out': 183.31333333333333, 'va': 154.64976522785415, 'q_out': 0.0, 'vm': 771.95365443590879}, u'vHA04-BBG': {'p_out': 37.313333333333347, 'va': 124.88096945424699, 'q_out': 0.0, 'vm': 220.06739365393091}, u'vHA03-HOW': {'p_out': 4803.339899681604, 'va': 6.8302417488958724, 'q_out': 0.0, 'vm': 139.72851144846874}, u'vHA09-BBG': {'p_out': 141.31333333333333, 'va': 97.539996075796424, 'q_out': 0.0, 'vm': 630.83514522616906}, u'vHA01-HOW': {'p_out': 10949.98, 'va': -72.851534796245531, 'q_out': 0.0, 'vm': 69.755037217583848}, u'vHA14-BBG': {'p_out': 7552.1240327965697, 'va': -49.257596644283026, 'q_out': 0.0, 'vm': 115.07168079342551}, u'vHA03-BBG': {'p_out': 11037.313333333334, 'va': 126.38251705646455, 'q_out': 0.0, 'vm': 176.81719083359553}, u'vHA16-BBG': {'p_out': 121.31333333333335, 'va': -50.544934983769821, 'q_out': 0.0, 'vm': 108.23449385675018}, u'vHA02-HOW': {'p_out': 12668.651092154827, 'va': -79.691209397518605, 'q_out': 0.0, 'vm': 32.626583731953303}, u'vHA01-BBG': {'p_out': 5961.1909021345718, 'va': -47.003361593425318, 'q_out': 0.0, 'vm': 93.231829707114855}, u'vHA13-BBG': {'p_out': 11092.646666666666, 'va': -48.546504718589944, 'q_out': 0.0, 'vm': 120.01827728625425}, u'vHA15-BBG': {'p_out': 894.98000000000002, 'va': -49.747572579684601, 'q_out': 0.0, 'vm': 112.32617341129384}, u'vHA08-BBG': {'p_out': 11043.313333333334, 'va': 99.199224387723007, 'q_out': 0.0, 'vm': 613.16805983387871}, u'vHA02-BBG': {'p_out': 35.313333333333347, 'va': 130.49716655966816, 'q_out': 0.0, 'vm': 37.346217101408286}, u'vHA02-DSS': {'p_out': 21.980000000000004, 'va': -117.78281972355822, 'q_out': 0.0, 'vm': 55.236560396894944}, u'vHA07-BBG': {'p_out': 11113.313333333334, 'va': 101.5397946680247, 'q_out': 0.0, 'vm': 589.19751791959823}, u'vKV0002': {'p_out': 7866.6360238068155, 'va': -102.4689164831115, 'q_out': 0.0, 'vm': 319.34723205394465}, u'vKV0003': {'p_out': 6744.5413891692051, 'va': -115.80737137051567, 'q_out': 0.0, 'vm': 37.513708200685393}, u'vKV0001': {'p_out': 2559.756902584631, 'va': -58.782287390912799, 'q_out': 0.0, 'vm': 79.087225643519218}, u'vETZB-SEK': {'p_out': 10887.98, 'va': -46.286115851600314, 'q_out': 0.0, 'vm': 140.86454455397677}, u'vHA07-DSS': {'p_out': 10937.313333333334, 'va': 87.57525137294644, 'q_out': 0.0, 'vm': 138.2408912635654}, u'vHA04-HOW': {'p_out': 11411.236273444227, 'va': 48.240499878440829, 'q_out': 0.0, 'vm': 162.26755522870906}, u'vHA03-AGP': {'p_out': -1530.3000000000141, 'va': -45.597882065183363, 'q_out': 0.0, 'vm': 149.51914212379373}, u'vHA04-DSS': {'p_out': 11035.313333333334, 'va': -26.021930012277949, 'q_out': 0.0, 'vm': 698.85275270156649}, u'vHA05-HOW': {'p_out': 11150.646666666667, 'va': 47.094062169399905, 'q_out': 0.0, 'vm': 118.59633512122868}, u'vHA01-WEG': {'p_out': 10973.98, 'va': -90.54393269542075, 'q_out': 0.0, 'vm': 56.418444154054072}, u'vHA01-AGP': {'p_out': 5404.9446380035497, 'va': 132.16700285370322, 'q_out': 0.0, 'vm': 10.000411193740891}, u'vHA01-ADB': {'p_out': 12808.912721281953, 'va': 50.949545764896051, 'q_out': 0.0, 'vm': 280.95483256873712}, u'vHA02-AGP': {'p_out': 11160.646666666666, 'va': 106.66968966461955, 'q_out': 0.0, 'vm': 46.956163488962048}, u'vHA02-WEG': {'p_out': 237.98000000000002, 'va': -18.039862029515067, 'q_out': 0.0, 'vm': 98.237929216527874}, u'vHA10-BBG': {'p_out': 11015.98, 'va': 85.196991452836144, 'q_out': 0.0, 'vm': 740.06362935256175}, u'vHA05-BBG': {'p_out': 10452.702843123596, 'va': 116.53866482510658, 'q_out': 0.0, 'vm': 392.28067131662192}}
#
#     node = set_547['vHA03-AGP']['p']
#     sim.set_data(set_547)
#
#     sim.step()
#
#     filename = 'msgrid.xlsx'
#     wb = Workbook(filename)
#     bold = wb.add_format({'bold': 1})
#     two_dec = wb.add_format({'num_format': '0.00'})
#     three_dec = wb.add_format({'num_format': '0.000'})
#
#     # Write bus data
#     ws_bus = wb.add_worksheet('Buses')
#     ## Headings
#     headings = [
#         'Name',
#         'V mag. [kV]',
#         u'V ang. [°]',
#         'P [kW]',
#         'Q [kVar]',
#     ]
#     for i, heading in enumerate(headings):
#         ws_bus.write(0, i, heading, bold)
#
#     ## Write bus data
#     busdata = sim.get_data('PowerGrid', 'PQBus', None)
#     attrs = [
#         ('name', None, None),
#         ('vm', three_dec, 1000),
#         ('va', three_dec, 1),
#         ('p_out', two_dec, 1000),
#         ('q_out', two_dec, 10000),
#     ]
#
#     griddata = sim.get_data('PowerGrid', 'Grid', None)
#
#     ws_bus.write(1, 0, 'Grid', None)
#     ws_bus.write(1, 1, '-', None)
#     ws_bus.write(1, 2, '-', None)
#     ws_bus.write(1, 3, griddata['Grid']['p']/1000, three_dec)
#     ws_bus.write(1, 4, griddata['Grid']['q']/1000, three_dec)
#
#     for i, (bus, data) in enumerate(sorted(busdata.items())):
#         data['name'] = bus
#         for j, (attr, fmt, scale) in enumerate(attrs):
#             val = data[attr]
#             if scale:
#                 val = val /scale
#             ws_bus.write(i + 2, j, val, fmt)
#
#     # Write branch data
#     ws_branch = wb.add_worksheet('Branches')
#     ## Headings
#     headings = [
#         'Name',
#         'P from [kW]',
#         'Q from [kVar]',
#         'P to [kW]',
#         'Q to [kVar]',
#     ]
#     for i, heading in enumerate(headings):
#         ws_branch.write(0, i, heading, bold)
#
#     ## Write branch data
#     attrs = [
#         ('name', None, None),
#         ('p_from', two_dec, 1000),
#         ('q_from', two_dec, 1000),
#         ('p_to', two_dec, 1000),
#         ('q_to', two_dec, 1000),
#     ]
#     branchdata = sim.get_data('PowerGrid', 'Branch', None)
#     transformerdata = sim.get_data('PowerGrid', 'Transformer', None)
#     branchdata.update(transformerdata)
#     for i, (branch, data) in enumerate(sorted(branchdata.items())):
#         data['name'] = branch
#         for j, (attr, fmt, scale) in enumerate(attrs):
#             val = data[attr]
#             if scale:
#                 val = val /scale
#             ws_branch.write(i + 1, j, val, fmt)
#
#     wb.close()
#
#
# if __name__ == '__main__':
#     test_strange_p()
